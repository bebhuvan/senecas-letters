---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Sample data - in a real implementation, this would come from a data source
const letters = Array.from({length: 124}, (_, i) => ({
  id: i + 1,
  number: i + 1 < 10 ? `0${i + 1}` : `${i + 1}`,
  romanNumeral: toRoman(i + 1),
  title: getLetterTitle(i + 1),
  theme: getLetterTheme(i + 1),
  preview: getLetterPreview(i + 1),
  date: `${65 - Math.floor(i / 12)} CE`, // Approximate dating
}));

function toRoman(num: number): string {
  const romanNumerals = [
    ['XC', 90], ['LXXX', 80], ['LXX', 70], ['LX', 60], ['L', 50],
    ['XL', 40], ['XXX', 30], ['XX', 20], ['X', 10], ['IX', 9],
    ['V', 5], ['IV', 4], ['I', 1]
  ];
  let result = '';
  for (const [roman, value] of romanNumerals) {
    while (num >= value) {
      result += roman;
      num -= value;
    }
  }
  return result;
}

function getLetterTitle(num: number): string {
  const titles = {
    1: "On the Proper Use of Time",
    2: "On Discursiveness in Reading",
    3: "On True and False Friendship",
    4: "On the Terrors of Death",
    5: "On the Philosopher's Mean",
    6: "On Sharing Knowledge",
    7: "On Crowds",
    8: "On the Philosopher's Seclusion",
    9: "On Philosophy and Friendship",
    10: "On Living to Oneself",
    11: "On the Blush of Modesty",
    12: "On Old Age",
    18: "On Festivals and Fasting",
    77: "On Taking Life"
  };
  return titles[num] || `On Philosophy and Life - Letter ${num}`;
}

function getLetterTheme(num: number): string {
  const themes = ["Time & Life", "Learning", "Friendship", "Death", "Philosophy", "Knowledge", "Society", "Solitude", "Virtue", "Self", "Character", "Aging"];
  return themes[num % themes.length];
}

function getLetterPreview(num: number): string {
  const previews = {
    1: "Greetings from Seneca to his friend Lucilius. Continue to act thus, my dear Lucilius‚Äîset yourself free for your own sake; gather and save your time...",
    2: "Judging by what you write me, and by what I hear, I am forming a good opinion regarding your future...",
    3: "You have sent a letter to me through the hand of a friend of yours, as you call him. Then you warn me not to discuss with him all the matters that concern you..."
  };
  return previews[num] || `A letter filled with timeless wisdom and practical philosophy from Seneca to his dear friend Lucilius. Letter ${num} explores profound insights into the human condition and the art of living well.`;
}
---

<Layout title="Library - Letters to Lucilius">
  <Header currentPath="/library" />
  
  <main>
    <!-- Library Header -->
    <section class="library-header">
      <div class="container">
        <div class="header-content">
          <h1>Complete Library</h1>
          <p class="subtitle">All 124 letters from Seneca to Lucilius, searchable and organized</p>
        </div>
        
        <!-- Search Bar -->
        <div class="search-container">
          <div class="search-wrapper">
            <input type="text" id="searchInput" class="search-input" placeholder="Search letters by title, theme, or content...">
            <button class="search-button">
              <span class="search-icon">üîç</span>
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Filters -->
    <section class="filters">
      <div class="container">
        <div class="filter-tabs">
          <button class="filter-tab active" data-filter="all">All Letters</button>
          <button class="filter-tab" data-filter="Time & Life">Time & Life</button>
          <button class="filter-tab" data-filter="Philosophy">Philosophy</button>
          <button class="filter-tab" data-filter="Friendship">Friendship</button>
          <button class="filter-tab" data-filter="Death">Death</button>
          <button class="filter-tab" data-filter="Virtue">Virtue</button>
        </div>
        
        <div class="sort-controls">
          <select id="sortSelect" class="sort-select">
            <option value="number">By Number</option>
            <option value="title">By Title</option>
            <option value="theme">By Theme</option>
          </select>
        </div>
      </div>
    </section>

    <!-- Letters Grid -->
    <section class="letters-section">
      <div class="container">
        <div class="letters-grid" id="lettersGrid">
          {letters.map((letter) => (
            <a href={`/letters/${letter.id}`} class="letter-card" data-theme={letter.theme}>
              <div class="card-header">
                <div class="letter-info">
                  <span class="letter-number">Letter {letter.romanNumeral}</span>
                  <span class="letter-theme">{letter.theme}</span>
                </div>
                <span class="letter-date">{letter.date}</span>
              </div>
              
              <h3 class="letter-title">{letter.title}</h3>
              <p class="letter-preview">{letter.preview}</p>
              
              <div class="card-footer">
                <span class="read-link">Read Letter ‚Üí</span>
              </div>
            </a>
          ))}
        </div>
        
        <!-- Load More -->
        <div class="load-more" id="loadMore" style="display: none;">
          <button class="load-more-btn">Load More Letters</button>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<style>
  .library-header {
    padding: 4rem 0;
    background: var(--surface);
    text-align: center;
  }

  .header-content {
    margin-bottom: 3rem;
  }

  .library-header h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 400;
    color: var(--text-primary);
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
  }

  .library-header .subtitle {
    font-size: 1.25rem;
    color: var(--text-secondary);
    font-style: italic;
    font-weight: 300;
  }

  /* Search */
  .search-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .search-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: var(--background);
    border: 2px solid var(--divider);
    border-radius: 6px;
    overflow: hidden;
    transition: border-color 0.3s ease;
  }

  .search-wrapper:focus-within {
    border-color: var(--terracotta);
  }

  .search-input {
    flex: 1;
    padding: 1.25rem 1.5rem;
    border: none;
    background: transparent;
    font-size: 1rem;
    color: var(--text-primary);
    font-family: 'Inter', sans-serif;
  }

  .search-input:focus {
    outline: none;
  }

  .search-input::placeholder {
    color: var(--text-muted);
    font-style: italic;
  }

  .search-button {
    padding: 1.25rem 1.5rem;
    background: var(--terracotta);
    border: none;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .search-button:hover {
    background: #b8561a;
  }

  .search-icon {
    font-size: 1rem;
  }

  /* Filters */
  .filters {
    padding: 2rem 0;
    background: var(--background);
    border-bottom: 1px solid var(--divider);
  }

  .filters .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
  }

  .filter-tabs {
    display: flex;
    gap: 0.5rem;
  }

  .filter-tab {
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: 1px solid var(--divider);
    color: var(--text-secondary);
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    font-weight: 400;
    cursor: pointer;
    border-radius: 20px;
    transition: all 0.3s ease;
  }

  .filter-tab:hover,
  .filter-tab.active {
    background: var(--terracotta);
    border-color: var(--terracotta);
    color: white;
  }

  .sort-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .sort-select {
    padding: 0.75rem 1rem;
    background: var(--surface);
    border: 1px solid var(--divider);
    color: var(--text-primary);
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    border-radius: 4px;
    cursor: pointer;
  }

  .sort-select:focus {
    outline: none;
    border-color: var(--terracotta);
  }

  /* Letters Section */
  .letters-section {
    padding: 4rem 0 6rem;
    background: var(--background);
  }

  .letters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .letter-card {
    background: var(--surface);
    padding: 2rem;
    border: 1px solid transparent;
    border-radius: 8px;
    text-decoration: none;
    display: block;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .letter-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--terracotta);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s ease;
  }

  .letter-card:hover {
    background: var(--terracotta-light);
    border-color: var(--subtle-border);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .letter-card:hover::before {
    transform: scaleX(1);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }

  .letter-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .letter-number {
    color: var(--terracotta);
    font-size: 0.8rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    font-family: 'Inter', sans-serif;
  }

  .letter-theme {
    color: var(--text-muted);
    font-size: 0.75rem;
    font-family: 'Inter', sans-serif;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    padding: 0.25rem 0.75rem;
    background: var(--terracotta-light);
    border-radius: 12px;
    align-self: flex-start;
  }

  .letter-date {
    color: var(--text-muted);
    font-size: 0.8rem;
    font-family: 'Inter', sans-serif;
    font-style: italic;
  }

  .letter-title {
    color: var(--text-primary);
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1rem;
    line-height: 1.4;
  }

  .letter-preview {
    color: var(--text-secondary);
    font-size: 1rem;
    line-height: 1.6;
    margin-bottom: 1.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-footer {
    display: flex;
    justify-content: flex-end;
  }

  .read-link {
    color: var(--terracotta);
    font-size: 0.9rem;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    letter-spacing: 0.025em;
    transition: all 0.3s ease;
  }

  .letter-card:hover .read-link {
    transform: translateX(0.25rem);
  }

  /* Load More */
  .load-more {
    text-align: center;
  }

  .load-more-btn {
    padding: 1rem 2.5rem;
    background: var(--surface);
    border: 2px solid var(--terracotta);
    color: var(--terracotta);
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    cursor: pointer;
    border-radius: 6px;
    transition: all 0.3s ease;
  }

  .load-more-btn:hover {
    background: var(--terracotta);
    color: white;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .letters-grid {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .library-header {
      padding: 3rem 0;
    }

    .library-header h1 {
      font-size: 2.5rem;
    }

    .filters .container {
      flex-direction: column;
      align-items: stretch;
      gap: 1.5rem;
    }

    .filter-tabs {
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }

    .filter-tab {
      white-space: nowrap;
      flex-shrink: 0;
    }

    .letters-grid {
      grid-template-columns: 1fr;
    }

    .letter-card {
      padding: 1.5rem;
    }

    .search-input {
      padding: 1rem 1.25rem;
    }

    .search-button {
      padding: 1rem 1.25rem;
    }
  }
</style>

<script>
  // Search functionality
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const lettersGrid = document.getElementById('lettersGrid') as HTMLElement;
  const filterTabs = document.querySelectorAll('.filter-tab');
  const sortSelect = document.getElementById('sortSelect') as HTMLSelectElement;
  
  let allLetters = Array.from(lettersGrid.children) as HTMLElement[];
  let currentFilter = 'all';

  // Search
  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    filterAndSort();
  });

  // Filter tabs
  filterTabs.forEach(tab => {
    tab.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const filter = target.getAttribute('data-filter') || 'all';
      
      // Update active tab
      filterTabs.forEach(t => t.classList.remove('active'));
      target.classList.add('active');
      
      currentFilter = filter;
      filterAndSort();
    });
  });

  // Sort
  sortSelect?.addEventListener('change', () => {
    filterAndSort();
  });

  function filterAndSort() {
    const searchTerm = searchInput?.value.toLowerCase() || '';
    const sortBy = sortSelect?.value || 'number';
    
    let filteredLetters = allLetters.filter(letter => {
      // Theme filter
      if (currentFilter !== 'all') {
        const letterTheme = letter.getAttribute('data-theme');
        if (letterTheme !== currentFilter) return false;
      }
      
      // Search filter
      if (searchTerm) {
        const title = letter.querySelector('.letter-title')?.textContent?.toLowerCase() || '';
        const preview = letter.querySelector('.letter-preview')?.textContent?.toLowerCase() || '';
        const theme = letter.querySelector('.letter-theme')?.textContent?.toLowerCase() || '';
        
        return title.includes(searchTerm) || preview.includes(searchTerm) || theme.includes(searchTerm);
      }
      
      return true;
    });

    // Sort
    filteredLetters.sort((a, b) => {
      switch (sortBy) {
        case 'title':
          const titleA = a.querySelector('.letter-title')?.textContent || '';
          const titleB = b.querySelector('.letter-title')?.textContent || '';
          return titleA.localeCompare(titleB);
        case 'theme':
          const themeA = a.querySelector('.letter-theme')?.textContent || '';
          const themeB = b.querySelector('.letter-theme')?.textContent || '';
          return themeA.localeCompare(themeB);
        default: // number
          const numberA = parseInt(a.querySelector('.letter-number')?.textContent?.match(/\d+/)?.[0] || '0');
          const numberB = parseInt(b.querySelector('.letter-number')?.textContent?.match(/\d+/)?.[0] || '0');
          return numberA - numberB;
      }
    });

    // Update grid
    lettersGrid.innerHTML = '';
    filteredLetters.forEach(letter => lettersGrid.appendChild(letter));
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    allLetters = Array.from(lettersGrid?.children || []) as HTMLElement[];
  });
</script>