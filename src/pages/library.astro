---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// We'll load the enhanced index client-side to avoid SSR complexity
---

<Layout title="Library - Letters to Lucilius">
  <Header currentPath="/library" />
  
  <main>
    <!-- Library Header -->
    <section class="library-header">
      <div class="container">
        <div class="header-content">
          <h1>The Complete Journey</h1>
          <p class="subtitle">Seneca's 124 letters written in his final years (63-65 CE)</p>
          <p class="timeline-note">Follow the chronological path of wisdom, or explore by philosophical themes</p>
        </div>
        
        <!-- Search Bar -->
        <div class="search-container">
          <div class="search-wrapper">
            <input type="text" id="searchInput" class="search-input" placeholder="Search letters by content, theme, or number...">
            <button class="search-button" type="button">
              <span class="search-icon">üîç</span>
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- View Toggle & Filters -->
    <section class="controls">
      <div class="container">
        <div class="view-controls">
          <div class="view-toggle">
            <button class="view-btn active" data-view="timeline">üìÖ Timeline</button>
            <button class="view-btn" data-view="collections">üìö Collections</button>
            <button class="view-btn" data-view="all">üìã All Letters</button>
          </div>
          
          <div class="filters">
            <select id="difficultyFilter" class="filter-select">
              <option value="">All Levels</option>
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="advanced">Advanced</option>
            </select>
            
            <select id="lengthFilter" class="filter-select">
              <option value="">All Lengths</option>
              <option value="short">Short (~5 min)</option>
              <option value="medium">Medium (~10 min)</option>
              <option value="long">Long (~15+ min)</option>
            </select>
            
            <select id="themeFilter" class="filter-select">
              <option value="">All Themes</option>
              <option value="Time & Life">Time & Life</option>
              <option value="Philosophy">Philosophy</option>
              <option value="Friendship">Friendship</option>
              <option value="Death">Death</option>
              <option value="Virtue">Virtue</option>
            </select>
          </div>
        </div>
        
        <div id="resultCount" class="result-count"></div>
      </div>
    </section>

    <!-- Content Area -->
    <section class="content-area">
      <div class="container">
        <!-- Timeline View -->
        <div id="timelineView" class="view-content active">
          <div class="timeline-container" id="timelineContainer">
            <!-- Timeline will be populated by JavaScript -->
            <div class="loading-message">Loading timeline...</div>
          </div>
        </div>

        <!-- Collections View -->
        <div id="collectionsView" class="view-content">
          <div class="collections-grid" id="collectionsGrid">
            <!-- Collections will be populated by JavaScript -->
            <div class="loading-message">Loading collections...</div>
          </div>
        </div>

        <!-- All Letters View -->
        <div id="allView" class="view-content">
          <div class="letters-grid" id="lettersGrid">
            <!-- Letters will be populated by JavaScript -->
            <div class="loading-message">Loading letters...</div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<style>
  /* Header */
  .library-header {
    padding: 4rem 0 3rem;
    background: var(--surface);
    text-align: center;
  }

  .header-content {
    margin-bottom: 3rem;
  }

  .library-header h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 300;
    color: var(--text-primary);
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
    font-family: 'Liberation Serif', 'Nimbus Roman', 'DejaVu Serif', serif;
  }

  .library-header .subtitle {
    font-size: 1.25rem;
    color: var(--text-secondary);
    margin-bottom: 0.75rem;
    font-weight: 300;
  }

  .timeline-note {
    font-size: 1rem;
    color: var(--text-muted);
    font-style: italic;
  }

  /* Search */
  .search-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .search-wrapper {
    display: flex;
    align-items: center;
    background: var(--background);
    border: 2px solid var(--divider);
    border-radius: 6px;
    overflow: hidden;
    transition: border-color 0.3s ease;
  }

  .search-wrapper:focus-within {
    border-color: var(--terracotta);
  }

  .search-input {
    flex: 1;
    padding: 1.25rem 1.5rem;
    border: none;
    background: transparent;
    font-size: 1rem;
    color: var(--text-primary);
    font-family: 'Inter', sans-serif;
  }

  .search-input:focus {
    outline: none;
  }

  .search-input::placeholder {
    color: var(--text-muted);
    font-style: italic;
  }

  .search-button {
    padding: 1.25rem 1.5rem;
    background: var(--terracotta);
    border: none;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .search-button:hover {
    background-color: #b5561a;
  }

  /* Controls */
  .controls {
    padding: 2rem 0;
    background: var(--background);
    border-bottom: 1px solid var(--divider);
  }

  .view-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    margin-bottom: 1rem;
  }

  .view-toggle {
    display: flex;
    gap: 0.5rem;
  }

  .view-btn {
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: 1px solid var(--divider);
    color: var(--text-secondary);
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    cursor: pointer;
    border-radius: 20px;
    transition: all 0.3s ease;
  }

  .view-btn.active,
  .view-btn:hover {
    background: var(--terracotta);
    border-color: var(--terracotta);
    color: white;
  }

  .filters {
    display: flex;
    gap: 1rem;
  }

  .filter-select {
    padding: 0.75rem 1rem;
    background: var(--surface);
    border: 1px solid var(--divider);
    color: var(--text-primary);
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    border-radius: 4px;
    cursor: pointer;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--terracotta);
  }

  .result-count {
    color: var(--text-secondary);
    font-size: 0.9rem;
    font-style: italic;
  }

  /* Content Area */
  .content-area {
    padding: 3rem 0 6rem;
    background: var(--background);
  }

  .view-content {
    display: none;
  }

  .view-content.active {
    display: block;
  }

  .loading-message {
    text-align: center;
    color: var(--text-muted);
    padding: 4rem 2rem;
    font-style: italic;
  }

  /* Timeline View */
  .timeline-container {
    position: relative;
    padding: 1.75rem 0 0 2.75rem;
  }

  .timeline-container::before {
    content: '';
    position: absolute;
    top: 0.5rem;
    bottom: 0;
    left: 1.25rem;
    width: 2px;
    background: linear-gradient(180deg, var(--terracotta), rgba(200, 99, 46, 0.08));
    opacity: 0.5;
  }

  .timeline-period {
    position: relative;
    margin-bottom: 3.5rem;
    padding-left: 0.5rem;
  }

  .timeline-period:last-child {
    margin-bottom: 0;
    padding-bottom: 1rem;
  }

  .timeline-period::before {
    content: '';
    position: absolute;
    left: 1.25rem;
    top: 0.9rem;
    width: 8px;
    height: 24px;
    border-radius: 999px;
    background: var(--terracotta);
    transform: translateX(-50%);
    box-shadow: 0 0 0 3px var(--background);
  }

  .timeline-header {
    display: flex;
    align-items: center;
    gap: 1.25rem;
    margin-bottom: 1.5rem;
    padding-left: 1rem;
  }

  .timeline-info h3 {
    display: inline-flex;
    align-items: center;
    font-size: 1.25rem;
    color: var(--terracotta);
    background: var(--terracotta-light);
    padding: 0.4rem 1rem;
    border-radius: 999px;
    font-family: 'Crimson Text', Georgia, serif;
    letter-spacing: 0.015em;
  }

  .timeline-info {
    flex: 1;
  }

  .timeline-info p {
    color: var(--text-muted);
    font-size: 0.95rem;
    margin-top: 0.5rem;
  }

  .timeline-letters {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.75rem;
  }

  /* Collections View */
  .collections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
  }

  .collection-card {
    background: var(--surface);
    padding: 2rem;
    border: 1px solid var(--divider);
    border-radius: 6px;
    position: relative;
    overflow: hidden;
  }

  .collection-header {
    margin-bottom: 1.5rem;
  }

  .collection-title {
    font-size: 1.4rem;
    color: var(--text-primary);
    margin-bottom: 0.75rem;
    font-family: 'Crimson Text', Georgia, serif;
    font-weight: 500;
    letter-spacing: -0.01em;
    line-height: 1.3;
  }

  .collection-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 0.75rem;
  }

  .difficulty-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .difficulty-badge.beginner {
    background: #e8f5e8;
    color: #2d5a2d;
  }

  .difficulty-badge.intermediate {
    background: #fff3cd;
    color: #856404;
  }

  .difficulty-badge.advanced {
    background: #f8d7da;
    color: #721c24;
  }

  .letter-count {
    color: var(--text-muted);
    font-size: 0.8rem;
  }

  .collection-description {
    color: var(--text-secondary);
    line-height: 1.65;
    margin-bottom: 1.75rem;
    opacity: 0.85;
    font-size: 0.95rem;
    font-style: italic;
  }

  .collection-letters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .letter-link {
    display: inline-block;
    padding: 0.5rem 0.9rem;
    background: var(--terracotta-light);
    color: var(--terracotta);
    text-decoration: none;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    border: 1px solid transparent;
    transition: all 0.2s ease;
    font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .letter-link:hover {
    background: var(--terracotta);
    color: white;
    transform: translateY(-1px);
  }

  /* Letter Cards */
  .letter-card {
    background: var(--surface);
    padding: 1.5rem;
    border: 1px solid var(--divider);
    border-radius: 6px;
    text-decoration: none;
    display: block;
    transition: all 0.2s ease;
  }

  .letter-card:hover {
    border-color: var(--terracotta);
    transform: translateY(-1px);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .letter-number {
    color: var(--terracotta);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .letter-meta {
    display: flex;
    gap: 0.5rem;
    font-size: 0.7rem;
    color: var(--text-muted);
  }

  .letter-title {
    color: var(--text-primary);
    font-size: 1.1rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
    line-height: 1.3;
    font-family: 'Crimson Text', Georgia, serif;
  }

  .letter-theme {
    color: var(--text-muted);
    font-size: 0.8rem;
    margin-bottom: 0.75rem;
  }

  /* All Letters Grid */
  .letters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .collections-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .library-header {
      padding: 3rem 0 2rem;
    }

    .view-controls {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .filters {
      flex-direction: column;
    }

    .timeline-letters {
      grid-template-columns: 1fr;
    }

    .timeline-header {
      padding-left: 0.5rem;
    }

    .letters-grid {
      grid-template-columns: 1fr;
    }

    .view-toggle {
      justify-content: center;
    }

    .timeline-container {
      padding-left: 2.25rem;
    }

    .timeline-container::before,
    .timeline-period::before {
      left: 1.05rem;
    }
  }
</style>

<script is:inline>
// Enhanced Library with Timeline, Collections, and Advanced Filtering
(function() {
  let enhancedIndex = null;
  let currentView = 'timeline';
  let currentFilters = {
    search: '',
    difficulty: '',
    length: '',
    theme: ''
  };
  let searchTokens = [];
  let searchPhrase = '';
  const STOP_WORDS = new Set([
    'the','and','for','with','from','that','this','your','have','will','are','was','were','his','her','their','you','but','not','our','all'
  ]);

  function tokenizeSearch(value) {
    return value
      .toLowerCase()
      .split(/[\s,]+/)
      .map(token => token.replace(/^[^a-z0-9]+|[^a-z0-9]+$/g, ''))
      .filter(token => token.length > 0 && !STOP_WORDS.has(token));
  }

  function scoreLetter(letter) {
    if (!searchPhrase) return 0;

    const haystack = [
      letter.t,
      letter.th,
      letter.p || '',
      letter.timeline ? `${letter.timeline.year} ${letter.timeline.season}` : ''
    ].join(' ').toLowerCase();

    const phraseMatch = haystack.includes(searchPhrase);
    let score = phraseMatch ? 60 : 0;
    let matched = phraseMatch;

    const tokensToCheck = searchTokens.length > 0 ? searchTokens : searchPhrase.split(/\s+/).filter(Boolean);

    tokensToCheck.forEach(token => {
      if (!token) return;

      if (letter.n && (letter.n.toString() === token || letter.n.toString() === searchPhrase)) {
        score += 100;
        matched = true;
        return;
      }

      if (haystack.includes(token)) {
        score += 25;
        matched = true;
      }

      if (letter.k && letter.k.some(keyword => keyword.includes(token))) {
        score += 20;
        matched = true;
      }
    });

    return matched ? score : -1;
  }
  
  // Load enhanced index
  async function loadEnhancedIndex() {
    if (enhancedIndex) return enhancedIndex;
    
    try {
      const response = await fetch('/api/enhanced-index.json');
      enhancedIndex = await response.json();
      console.log('[Library] Loaded enhanced index');
      return enhancedIndex;
    } catch (error) {
      console.error('[Library] Failed to load enhanced index:', error);
      return null;
    }
  }
  
  // Convert title to proper case
  function toTitleCase(str) {
    return str.toLowerCase().replace(/\b\w/g, l => l.toUpperCase());
  }

  // Create letter card HTML
  function createLetterCard(letter, compact = false) {
    const cleanTitle = toTitleCase(letter.t.replace(/\[\d+\]/g, '').trim());
    const slug = cleanTitle.toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    const url = `/letters/${letter.n}-${slug}`;
    const difficultyClass = letter.meta?.difficulty || 'beginner';
    const lengthText = letter.meta?.length === 'short' ? '~5 min' : 
                     letter.meta?.length === 'medium' ? '~10 min' : '~15+ min';
    
    if (compact) {
      return `
        <a href="${url}" class="letter-link" title="${cleanTitle}">
          Letter ${letter.n}
        </a>
      `;
    }
    
    return `
      <a href="${url}" class="letter-card" data-number="${letter.n}" data-theme="${letter.th}" data-difficulty="${difficultyClass}" data-length="${letter.meta?.length}">
        <div class="card-header">
          <span class="letter-number">Letter ${letter.n}</span>
          <div class="letter-meta">
            <span class="${difficultyClass}">${difficultyClass}</span>
            <span>${lengthText}</span>
          </div>
        </div>
        <h3 class="letter-title">${cleanTitle}</h3>
        <p class="letter-theme">${letter.th}</p>
      </a>
    `;
  }
  
  // Filter letters
  function filterLetters(letters) {
    return letters.filter(letter => {
      // Search filter
      if (searchPhrase) {
        const score = scoreLetter(letter);
        if (score <= 0) {
          return false;
        }
        letter._score = score;
      } else {
        letter._score = 0;
      }

      // Difficulty filter
      if (currentFilters.difficulty && letter.meta?.difficulty !== currentFilters.difficulty) {
        return false;
      }
      
      // Length filter
      if (currentFilters.length && letter.meta?.length !== currentFilters.length) {
        return false;
      }
      
      // Theme filter
      if (currentFilters.theme && letter.th !== currentFilters.theme) {
        return false;
      }
      
      return true;
    });
  }
  
  // Render timeline view
  function renderTimelineView(index) {
    const container = document.getElementById('timelineContainer');
    if (!container) return;
    
    const filteredLetters = filterLetters(index.letters);
    const lettersByPeriod = {};
    
    // Group filtered letters by timeline period
    filteredLetters.forEach(letter => {
      if (!letter.timeline) return;
      const key = `${letter.timeline.year} - ${letter.timeline.season}`;
      if (!lettersByPeriod[key]) {
        lettersByPeriod[key] = {
          year: letter.timeline.year,
          season: letter.timeline.season,
          letters: []
        };
      }
      lettersByPeriod[key].letters.push(letter);
    });
    
    let html = '';
    Object.entries(lettersByPeriod).forEach(([key, period]) => {
      html += `
        <div class="timeline-period">
          <div class="timeline-header">
            <div class="timeline-info">
              <h3>${period.year}</h3>
              <p>${period.season} ‚Ä¢ ${period.letters.length} letters</p>
            </div>
          </div>
          <div class="timeline-letters">
            ${period.letters.map(letter => createLetterCard(letter)).join('')}
          </div>
        </div>
      `;
    });
    
    container.innerHTML = html || '<div class="loading-message">No letters match your filters</div>';
    
    updateResultCount(filteredLetters.length);
  }
  
  // Render collections view
  function renderCollectionsView(index) {
    const container = document.getElementById('collectionsGrid');
    if (!container) return;
    
    let html = '';
    Object.entries(index.collections).forEach(([name, collection]) => {
      const collectionLetters = index.letters.filter(letter => 
        collection.letters.includes(letter.n)
      );
      
      const filteredCollectionLetters = filterLetters(collectionLetters);
      if (searchPhrase) {
        filteredCollectionLetters.sort((a, b) => (b._score || 0) - (a._score || 0));
      }
      
      if (filteredCollectionLetters.length === 0 && currentFilters.search) {
        return; // Skip empty collections when searching
      }
      
      html += `
        <div class="collection-card">
          <div class="collection-header">
            <h3 class="collection-title">${name}</h3>
            <div class="collection-meta">
              <span class="difficulty-badge ${collection.difficulty}">${collection.difficulty}</span>
              <span class="letter-count">${filteredCollectionLetters.length} letters</span>
            </div>
            <p class="collection-description">${collection.description}</p>
          </div>
          <div class="collection-letters">
            ${filteredCollectionLetters.map(letter => createLetterCard(letter, true)).join('')}
          </div>
        </div>
      `;
    });
    
    container.innerHTML = html || '<div class="loading-message">No collections match your filters</div>';
    
    const totalLetters = filterLetters(index.letters).length;
    updateResultCount(totalLetters);
  }
  
  // Render all letters view
  function renderAllView(index) {
    const container = document.getElementById('lettersGrid');
    if (!container) return;
    
    const filteredLetters = filterLetters(index.letters);
    if (searchPhrase) {
      filteredLetters.sort((a, b) => (b._score || 0) - (a._score || 0));
    }
    
    const html = filteredLetters.map(letter => createLetterCard(letter)).join('');
    container.innerHTML = html || '<div class="loading-message">No letters match your filters</div>';
    
    updateResultCount(filteredLetters.length);
  }
  
  // Update result count
  function updateResultCount(count) {
    const resultDiv = document.getElementById('resultCount');
    if (resultDiv) {
      if (count > 0) {
        resultDiv.textContent = `Showing ${count} letter${count !== 1 ? 's' : ''}`;
      } else {
        resultDiv.textContent = 'No matches found';
      }
    }
  }
  
  // Render current view
  async function renderCurrentView() {
    const index = await loadEnhancedIndex();
    if (!index) return;
    
    switch (currentView) {
      case 'timeline':
        renderTimelineView(index);
        break;
      case 'collections':
        renderCollectionsView(index);
        break;
      case 'all':
        renderAllView(index);
        break;
    }
  }
  
  // Switch view
  function switchView(newView) {
    currentView = newView;
    
    // Update view buttons
    document.querySelectorAll('.view-btn').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.view === newView);
    });
    
    // Update view content
    document.querySelectorAll('.view-content').forEach(content => {
      content.classList.toggle('active', content.id === `${newView}View`);
    });
    
    renderCurrentView();
  }
  
  // Update filters
  function updateFilters() {
    currentFilters.search = document.getElementById('searchInput')?.value.trim() || '';
    currentFilters.difficulty = document.getElementById('difficultyFilter')?.value || '';
    currentFilters.length = document.getElementById('lengthFilter')?.value || '';
    currentFilters.theme = document.getElementById('themeFilter')?.value || '';

    searchPhrase = currentFilters.search.trim().toLowerCase();
    searchTokens = tokenizeSearch(currentFilters.search);
    
    renderCurrentView();
  }
  
  // Debounce function
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  // Initialize
  function init() {
    // View toggle buttons
    document.querySelectorAll('.view-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        switchView(btn.dataset.view);
      });
    });
    
    // Search input
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', debounce(updateFilters, 300));
    }
    
    // Filter selects
    ['difficultyFilter', 'lengthFilter', 'themeFilter'].forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.addEventListener('change', updateFilters);
      }
    });
    
    // Load initial view
    renderCurrentView();
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>
