---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import lettersData from '../../data/all_letters.json';

const { id } = Astro.params;

// Only accept full slug format: "84-on-gathering-ideas"
// Reject old format like just "84"
if (!id || !id.includes('-')) {
  return new Response(null, {
    status: 404,
    statusText: 'Letter not found'
  });
}

// Find the letter by parsing the ID slug (format: "84-on-gathering-ideas")
const letterNumber = parseInt(id.split('-')[0]);
const letter = lettersData.letters.find(l => l.number === letterNumber);

// If letter not found, return 404
if (!letter) {
  return new Response(null, {
    status: 404,
    statusText: 'Letter not found'
  });
}

// Generate SEO-friendly slug from title (component scope)
function createSlug(title: string): string {
  return title.toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Remove special chars
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .trim();
}

// letterNumber is already defined above

// Get previous and next letters for navigation
const currentIndex = lettersData.letters.findIndex(l => l.number === letterNumber);
const prevLetter = currentIndex > 0 ? lettersData.letters[currentIndex - 1] : null;
const nextLetter = currentIndex < lettersData.letters.length - 1 ? lettersData.letters[currentIndex + 1] : null;

// Function to get Roman numeral
function toRoman(num: number): string {
  const romanNumerals = [
    ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]
  ];
  let result = '';
  for (const [roman, value] of romanNumerals) {
    while (num >= value) {
      result += roman;
      num -= value;
    }
  }
  return result;
}

const romanNumeral = letter.roman_number || toRoman(letter.number);

// Create description for SEO
const letterDescription = letter.content
  .split('\n\n')[0] // First paragraph
  .replace(/^\d+\.\s+/, '') // Remove number prefix
  .replace(/\[\d+\]/g, '') // Remove footnotes
  .substring(0, 160) + '...'; // Truncate for meta description

// Clean title by removing footnote references like [1], [2], etc.
function cleanTitle(title: string): string {
  return title.replace(/\[\d+\]/g, '').trim();
}

const cleanedTitle = cleanTitle(letter.title);

// SEO-friendly slug for this letter
const currentSlug = createSlug(cleanedTitle);

// Helper function for template use - SEO-friendly URLs with title
function getLetterUrl(letterObj: any): string {
  const cleanedTitle = cleanTitle(letterObj.title);
  const slug = createSlug(cleanedTitle);
  return `/letters/${letterObj.number}-${slug}`;
}

// Function to format content with proper paragraphs, creating new paragraphs where numbers existed
function formatContent(content: string): string {
  // First, split by existing paragraph breaks
  let sections = content.split('\n\n');
  let allParagraphs = [];
  
  sections.forEach(section => {
    section = section.trim();
    if (section.length === 0) return;
    
    // Split on paragraph numbers within the text to create new paragraphs
    // This regex looks for patterns like " 2. " or " 3. " etc. in the middle of text
    let parts = section.split(/\s+(\d+)\.\s+/);
    
    for (let i = 0; i < parts.length; i++) {
      let part = parts[i].trim();
      if (part.length === 0) continue;
      
      // Skip if this is just a lone number (these are the captured groups from the split)
      if (/^\d+$/.test(part)) continue;
      
      // Clean the part
      let cleaned = part;
      
      // Remove paragraph numbers at the beginning (e.g., "1. ", "2. ", etc.)
      cleaned = cleaned.replace(/^\d+\.\s+/, '');
      
      // Remove footnote markers like [1], [2], etc.
      cleaned = cleaned.replace(/\[\d+\]/g, '');
      
      // Remove footnote content at the end (lines starting with ↑)
      cleaned = cleaned.replace(/↑.*$/gm, '');
      
      // Clean up extra whitespace and newlines
      cleaned = cleaned.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
      
      if (cleaned.length > 0) {
        allParagraphs.push(cleaned);
      }
    }
  });
  
  return allParagraphs
    .filter(paragraph => paragraph.length > 0)
    .map(paragraph => `<p>${paragraph}</p>`)
    .join('');
}
---

<Layout 
  title={`Letter ${letter.number}: ${cleanedTitle.toLowerCase().replace(/\b\w/g, l => l.toUpperCase())} - Seneca`}
  description={letterDescription}
  ogType="article"
  canonical={`/letters/${letter.number}-${currentSlug}`}
>
  <Header />
  
  <main class="letter-main">

    <!-- Letter Content -->
    <article class="letter-content">
      <div class="container">
        <!-- Letter Header -->
        <header class="letter-header">
          <div class="letter-meta">
            <span class="letter-number">Letter {letter.number}</span>
            <span class="letter-date">c. 65 CE</span>
          </div>
          <h1 class="letter-title">{cleanedTitle.toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}</h1>
          
          <!-- Reading Controls -->
          <div class="reading-controls">
            <div class="control-group">
              <select id="fontSelect" class="font-select">
                <option value="lora">Lora (Default)</option>
                <option value="liberation">Liberation Serif</option>
                <option value="iowan">Iowan Old Style</option>
                <option value="palatino">Palatino</option>
                <option value="georgia">Georgia</option>
                <option value="system-sans">System Sans</option>
                <option value="sf-pro">SF Pro</option>
              </select>
            </div>
            
            <div class="control-group">
              <button id="decreaseSize" class="size-btn">A-</button>
              <span id="currentSize" class="current-size">20px</span>
              <button id="increaseSize" class="size-btn">A+</button>
            </div>
          </div>
          
        </header>

        <!-- Letter Body -->
        <div class="letter-body" id="letterBody">
          <Fragment set:html={formatContent(letter.content)} />
        </div>

        <!-- Letter Navigation -->
        <nav class="letter-navigation">
          <div class="nav-links">
            {prevLetter && (
              <a href={getLetterUrl(prevLetter)} class="nav-link prev">
                <span class="nav-direction">← Previous</span>
                <span class="nav-title">Letter {prevLetter.roman_number || toRoman(prevLetter.number)}: {cleanTitle(prevLetter.title).toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}</span>
              </a>
            )}
            
            {nextLetter && (
              <a href={getLetterUrl(nextLetter)} class="nav-link next">
                <span class="nav-direction">Next →</span>
                <span class="nav-title">Letter {nextLetter.roman_number || toRoman(nextLetter.number)}: {cleanTitle(nextLetter.title).toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}</span>
              </a>
            )}
          </div>
          
          <a href="/library" class="back-to-library">← Back to Library</a>
        </nav>

        <!-- Related Letters -->
        <section class="related-letters">
          <h3 class="related-title">Related Letters</h3>
          <div class="related-grid">
            {lettersData.letters
              .filter(l => l.number !== letter.number)
              .slice(Math.max(0, letter.number - 15), letter.number + 10)
              .filter(l => l.number !== letter.number)
              .slice(0, 3)
              .map(relatedLetter => (
                <a href={getLetterUrl(relatedLetter)} class="related-card">
                  <div class="related-number">Letter {relatedLetter.roman_number || toRoman(relatedLetter.number)}</div>
                  <h4 class="related-letter-title">{cleanTitle(relatedLetter.title).toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}</h4>
                  <p class="related-excerpt">{relatedLetter.content.split('\n\n')[0].replace(/^\d+\.\s+/, '').substring(0, 120)}...</p>
                </a>
              ))
            }
          </div>
        </section>
      </div>
    </article>
  </main>

  <Footer />
</Layout>

<style>
  /* Color Variables */
  :root {
    --terracotta: #B87333;
    --terracotta-light: rgba(184, 115, 51, 0.05);
  }

  .letter-main {
    min-height: 100vh;
    background: var(--background);
    padding-top: 0;
  }



  /* Letter Content */
  .letter-content {
    padding-top: 1rem;
  }

  .letter-header {
    text-align: center;
    padding: 3rem 0 4rem;
    position: relative;
  }

  .letter-meta {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .letter-number {
    color: var(--terracotta);
    font-size: 0.9rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    font-family: 'Inter', sans-serif;
  }

  .letter-date {
    color: var(--text-muted);
    font-size: 0.85rem;
    font-style: italic;
    font-family: 'Inter', sans-serif;
  }

  .letter-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 400;
    color: var(--text-primary);
    margin-bottom: 3rem;
    line-height: 1.2;
    letter-spacing: -0.02em;
  }

  .reading-options-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--terracotta);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .reading-options-btn:hover {
    background: #b8561a;
    transform: translateY(-1px);
  }

  /* Letter Body */
  /* Reading Controls */
  .reading-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
    padding: 1.25rem;
    background: var(--surface);
    border: 1px solid var(--divider);
    border-radius: 6px;
    max-width: 400px;
    margin: 0 auto 3rem;
  }

  .control-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .font-select {
    padding: 0.5rem 0.75rem;
    background: var(--background);
    border: 1px solid var(--divider);
    border-radius: 4px;
    color: var(--text-primary);
    font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    font-size: 0.875rem;
    cursor: pointer;
    min-width: 140px;
  }

  .font-select:focus {
    outline: none;
    border-color: var(--terracotta);
  }

  .size-btn {
    background: var(--background);
    border: 1px solid var(--divider);
    color: var(--text-primary);
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.85rem;
    transition: all 0.3s ease;
    font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .size-btn:hover {
    background: var(--terracotta);
    color: white;
    border-color: var(--terracotta);
  }

  .current-size {
    font-size: 0.85rem;
    color: var(--text-secondary);
    min-width: 3rem;
    text-align: center;
    font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .letter-body {
    max-width: 750px;
    margin: 0 auto;
    font-size: 20px;
    line-height: 1.8;
    color: var(--text-primary);
    font-family: 'Lora', 'Iowan Old Style', 'Palatino Linotype', 'Book Antiqua', 'Minion Pro', 'Hoefler Text', Georgia, serif;
  }

  .letter-body :global(p) {
    margin-bottom: 1.5em;
    text-align: justify;
    hyphens: auto;
    -webkit-hyphens: auto;
    -ms-hyphens: auto;
  }

  /* Removed special first paragraph styling for consistency */

  /* Letter Navigation */
  .letter-navigation {
    max-width: 750px;
    margin: 6rem auto 0;
    padding-top: 3rem;
    border-top: 1px solid var(--divider);
  }

  .nav-links {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .nav-link {
    text-decoration: none;
    padding: 2rem;
    background: var(--surface);
    border: 1px solid transparent;
    border-radius: 8px;
    display: block;
  }

  .nav-link.prev {
    text-align: left;
  }

  .nav-link.next {
    text-align: right;
    grid-column: 2;
  }

  .nav-direction {
    display: block;
    font-size: 0.85rem;
    color: var(--terracotta);
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
  }

  .nav-title {
    display: block;
    color: var(--text-primary);
    font-size: 1rem;
    line-height: 1.4;
    font-weight: 500;
  }

  .back-to-library {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.95rem;
    font-family: 'Inter', sans-serif;
    transition: color 0.3s ease;
  }

  .back-to-library:hover {
    color: var(--terracotta);
  }

  /* Related Letters */
  .related-letters {
    max-width: 750px;
    margin: 4rem auto 0;
    padding-top: 3rem;
    border-top: 1px solid var(--divider);
  }

  .related-title {
    font-size: 1.5rem;
    color: var(--text-primary);
    margin-bottom: 2rem;
    font-weight: 400;
    text-align: center;
    font-family: 'Inter', sans-serif;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
  }

  .related-card {
    text-decoration: none;
    padding: 1.5rem;
    background: var(--surface);
    border: 1px solid var(--divider);
    border-radius: 8px;
    display: block;
  }

  .related-number {
    color: var(--terracotta);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    margin-bottom: 0.5rem;
    font-family: 'Inter', sans-serif;
  }

  .related-letter-title {
    color: var(--text-primary);
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    line-height: 1.3;
  }

  .related-excerpt {
    color: var(--text-secondary);
    font-size: 0.85rem;
    line-height: 1.5;
  }

  /* Font Variations - Global styles */
  :global(.font-lora) {
    font-family: 'Lora', 'Iowan Old Style', 'Palatino Linotype', 'Book Antiqua', 'Minion Pro', 'Hoefler Text', Georgia, serif !important;
    font-feature-settings: 'liga' 1, 'kern' 1;
  }
  :global(.font-liberation) {
    font-family: 'Liberation Serif', 'Nimbus Roman', 'DejaVu Serif', Georgia, serif !important;
    font-feature-settings: 'liga' 1, 'kern' 1;
  }
  :global(.font-iowan) {
    font-family: 'Iowan Old Style', 'New York', 'Apple Garamond', 'Baskerville', Georgia, serif !important;
    font-feature-settings: 'liga' 1, 'kern' 1, 'onum' 1;
  }
  :global(.font-palatino) {
    font-family: 'Palatino Linotype', 'Palatino', 'Book Antiqua', 'URW Palladio L', Georgia, serif !important;
    font-feature-settings: 'liga' 1, 'kern' 1;
  }
  :global(.font-georgia) { 
    font-family: Georgia, 'Nimbus Roman', 'Liberation Serif', serif !important;
    font-feature-settings: 'liga' 1, 'kern' 1;
  }
  :global(.font-system-sans) { 
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI Variable', 'Segoe UI', 'Liberation Sans', 'DejaVu Sans', system-ui, sans-serif !important;
    font-weight: 400;
    letter-spacing: -0.014em;
  }
  :global(.font-sf-pro) {
    font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI Variable', 'Segoe UI', 'Liberation Sans', system-ui, sans-serif !important;
    font-weight: 400;
    letter-spacing: -0.016em;
    font-feature-settings: 'liga' 1, 'kern' 1;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .letter-header {
      padding: 2rem 0 3rem;
    }
    
    .reading-controls {
      flex-direction: column;
      gap: 1rem;
      padding: 1rem;
    }
    
    .font-select {
      min-width: 120px;
      font-size: 0.8rem;
    }

    .letter-title {
      font-size: 2.5rem;
    }

    .letter-body {
      font-size: 16px;
      line-height: 1.7;
    }

    .letter-body :global(p) {
      margin-bottom: 1.4em;
    }


    .nav-links {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .nav-link.next {
      grid-column: 1;
      text-align: left;
    }

    .nav-link {
      padding: 1.5rem;
    }

    .letter-navigation {
      margin-top: 4rem;
    }
  }

  @media (max-width: 480px) {
    .letter-meta {
      flex-direction: column;
      gap: 0.5rem;
    }

  }
</style>

<script nonce={Astro.locals.nonce}>
  console.log('🚀 Script tag executed immediately!');
  
  // Function to initialize when DOM is ready
  function initFontSelector() {
    console.log('🔥 Initializing font selector...');
    
    // Reading controls functionality
    const letterBody = document.getElementById('letterBody');
    const fontSelect = document.getElementById('fontSelect');
    const decreaseSizeBtn = document.getElementById('decreaseSize');
    const increaseSizeBtn = document.getElementById('increaseSize');
    const currentSizeDisplay = document.getElementById('currentSize');
    const themeToggle = document.getElementById('themeToggle');
    
    console.log('🔍 Elements found:', { letterBody, fontSelect, decreaseSizeBtn, increaseSizeBtn });
    
    // Verify elements are found
    if (!fontSelect) {
      console.log('❌ fontSelect element NOT found');
      return; // Exit if no fontSelect found
    }
    
    if (!letterBody) {
      console.log('❌ letterBody element NOT found');
      return; // Exit if no letterBody found
    }
    
    console.log('✅ All elements found successfully');

    let currentFontSize = 20;

  // Font selection
  fontSelect?.addEventListener('change', (e) => {
    console.log('🎯 Font selection event triggered!');
    const target = e.target;
    const fontValue = target.value;
    console.log('🔤 Font changed to:', fontValue);
    
    if (letterBody) {
      // Define font families for each option
      const fontMap = {
        'lora': "'Lora', 'Iowan Old Style', 'Palatino Linotype', 'Book Antiqua', 'Minion Pro', 'Hoefler Text', Georgia, serif",
        'liberation': "'Liberation Serif', 'Nimbus Roman', 'DejaVu Serif', Georgia, serif",
        'iowan': "'Iowan Old Style', 'New York', 'Apple Garamond', 'Baskerville', Georgia, serif",
        'palatino': "'Palatino Linotype', 'Palatino', 'Book Antiqua', 'URW Palladio L', Georgia, serif",
        'georgia': "Georgia, 'Nimbus Roman', 'Liberation Serif', serif",
        'system-sans': "-apple-system, BlinkMacSystemFont, 'Segoe UI Variable', 'Segoe UI', 'Liberation Sans', 'DejaVu Sans', system-ui, sans-serif",
        'sf-pro': "'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI Variable', 'Segoe UI', 'Liberation Sans', system-ui, sans-serif"
      };
      
      // Apply font directly via inline style (highest specificity)
      const fontFamily = fontMap[fontValue] || fontMap['lora'];
      letterBody.style.fontFamily = fontFamily;
      console.log('Applied font-family:', fontFamily);
      
      // Force a style recalculation
      letterBody.offsetHeight; // Trigger reflow
    }
    localStorage.setItem('preferred-font', fontValue);
  });

  // Font size controls
  function updateFontSize(size) {
    if (letterBody) {
      letterBody.style.fontSize = `${size}px`;
      if (currentSizeDisplay) {
        currentSizeDisplay.textContent = `${size}px`;
      }
      localStorage.setItem('font-size', size.toString());
    }
  }

  decreaseSizeBtn?.addEventListener('click', () => {
    if (currentFontSize > 16) {
      currentFontSize -= 2;
      updateFontSize(currentFontSize);
    }
  });

  increaseSizeBtn?.addEventListener('click', () => {
    if (currentFontSize < 28) {
      currentFontSize += 2;
      updateFontSize(currentFontSize);
    }
  });

  // Theme toggle
  themeToggle?.addEventListener('click', () => {
    const html = document.documentElement;
    const currentTheme = html.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    html.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    
    if (themeToggle) {
      themeToggle.textContent = newTheme === 'dark' ? '☀️' : '🌙';
    }
  });

  // Auto-hide header on scroll
  let lastScrollY = 0;
  let ticking = false;

  function updateHeader() {
    const header = document.querySelector('.header');
    const scrollY = window.scrollY;
    
    if (scrollY > lastScrollY && scrollY > 100) {
      // Scrolling down & past header height
      header?.classList.add('hidden');
    } else {
      // Scrolling up or at top
      header?.classList.remove('hidden');
    }
    
    lastScrollY = scrollY;
    ticking = false;
  }

  function onScroll() {
    if (!ticking) {
      requestAnimationFrame(updateHeader);
      ticking = true;
    }
  }

  window.addEventListener('scroll', onScroll, { passive: true });

    // Initialize settings from localStorage
    console.log('DOM loaded, initializing font settings');
    console.log('Elements found:', { fontSelect, letterBody });
    
    // Font preference
    const savedFont = localStorage.getItem('preferred-font') || 'lora';
    console.log('Saved font:', savedFont);
    
    if (fontSelect) {
      fontSelect.value = savedFont;
      console.log('Applying saved font:', savedFont);
      if (letterBody) {
        // Define font families for each option (same as above)
        const fontMap = {
          'lora': "'Lora', 'Iowan Old Style', 'Palatino Linotype', 'Book Antiqua', 'Minion Pro', 'Hoefler Text', Georgia, serif",
          'liberation': "'Liberation Serif', 'Nimbus Roman', 'DejaVu Serif', Georgia, serif",
          'iowan': "'Iowan Old Style', 'New York', 'Apple Garamond', 'Baskerville', Georgia, serif",
          'palatino': "'Palatino Linotype', 'Palatino', 'Book Antiqua', 'URW Palladio L', Georgia, serif",
          'georgia': "Georgia, 'Nimbus Roman', 'Liberation Serif', serif",
          'system-sans': "-apple-system, BlinkMacSystemFont, 'Segoe UI Variable', 'Segoe UI', 'Liberation Sans', 'DejaVu Sans', system-ui, sans-serif",
          'sf-pro': "'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI Variable', 'Segoe UI', 'Liberation Sans', system-ui, sans-serif"
        };
        
        // Apply font directly via inline style
        const fontFamily = fontMap[savedFont] || fontMap['lora'];
        letterBody.style.fontFamily = fontFamily;
        console.log('Applied initial font-family:', fontFamily);
      }
    }

    // Font size preference
    const savedSize = localStorage.getItem('font-size');
    if (savedSize) {
      currentFontSize = parseInt(savedSize);
      updateFontSize(currentFontSize);
    }

    // Theme preference
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    if (themeToggle) {
      themeToggle.textContent = savedTheme === 'dark' ? '☀️' : '🌙';
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Ctrl/Cmd + Plus to increase font size
      if ((e.ctrlKey || e.metaKey) && e.key === '=') {
        e.preventDefault();
        if (currentFontSize < 24) {
          currentFontSize += 2;
          updateFontSize(currentFontSize);
        }
      }
      
      // Ctrl/Cmd + Minus to decrease font size
      if ((e.ctrlKey || e.metaKey) && e.key === '-') {
        e.preventDefault();
        if (currentFontSize > 14) {
          currentFontSize -= 2;
          updateFontSize(currentFontSize);
        }
      }
    });

  } // End of initFontSelector function

  // Try different approaches to ensure DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFontSelector);
  } else {
    // DOM is already loaded
    initFontSelector();
  }
</script>