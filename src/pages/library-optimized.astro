---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import searchIndex from '../data/search-index.json';

// Convert text to title case
function toTitleCase(text: string): string {
  return text.toLowerCase().replace(/\b\w/g, (char) => char.toUpperCase());
}

// Clean title
function cleanTitle(title: string): string {
  return toTitleCase(title.replace(/\[\d+\]/g, '').trim());
}

// SEO-friendly slug generator
function createSlug(title: string): string {
  return title.toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

// Process only first 20 letters for initial render
const initialLetters = searchIndex.letters.slice(0, 20).map((letter) => {
  const cleanedTitle = cleanTitle(letter.t);
  const slug = createSlug(cleanedTitle);
  
  return {
    id: letter.n,
    number: letter.n.toString(),
    displayNumber: letter.n.toString(),
    title: cleanedTitle,
    theme: letter.th,
    preview: letter.p,
    date: `${65 - Math.floor((letter.n - 1) / 12)} CE`,
    url: `/letters/${letter.n}-${slug}`
  };
});
---

<Layout title="Library - Letters to Lucilius">
  <Header currentPath="/library" />
  
  <main>
    <!-- Library Header -->
    <section class="library-header">
      <div class="container">
        <div class="header-content">
          <h1>Complete Library</h1>
          <p class="subtitle">All 124 letters from Seneca to Lucilius, searchable and organized</p>
        </div>
        
        <!-- Search Bar -->
        <div class="search-container">
          <div class="search-wrapper">
            <input type="text" id="searchInput" class="search-input" placeholder="Search letters by title, theme, or content...">
            <button class="search-button">
              <span class="search-icon">üîç</span>
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Filters -->
    <section class="filters">
      <div class="container">
        <div id="resultCount" class="result-count"></div>
        <div class="filter-tabs">
          <button class="filter-tab active" data-filter="all">All Letters</button>
          <button class="filter-tab" data-filter="Time & Life">Time & Life</button>
          <button class="filter-tab" data-filter="Philosophy">Philosophy</button>
          <button class="filter-tab" data-filter="Friendship">Friendship</button>
          <button class="filter-tab" data-filter="Death">Death</button>
          <button class="filter-tab" data-filter="Virtue">Virtue</button>
        </div>
        
        <div class="sort-controls">
          <select id="sortSelect" class="sort-select">
            <option value="number">By Number</option>
            <option value="title">By Title</option>
            <option value="theme">By Theme</option>
          </select>
        </div>
      </div>
    </section>

    <!-- Letters Grid -->
    <section class="letters-section">
      <div class="container">
        <div class="letters-grid" id="lettersGrid">
          {initialLetters.map((letter) => (
            <a href={letter.url} class="letter-card" data-theme={letter.theme} data-letter-id={letter.id}>
              <div class="card-header">
                <div class="letter-info">
                  <span class="letter-number" data-number={letter.number}>Letter {letter.displayNumber}</span>
                  <span class="letter-theme">{letter.theme}</span>
                </div>
                <span class="letter-date">{letter.date}</span>
              </div>
              
              <h3 class="letter-title">{letter.title}</h3>
              <p class="letter-preview">{letter.preview}</p>
              
              <div class="card-footer">
                <span class="read-link">Read Letter ‚Üí</span>
              </div>
            </a>
          ))}
        </div>
        
        <!-- Loading indicator -->
        <div class="loading-indicator" id="loadingIndicator" style="display: none;">
          <div class="spinner"></div>
          <span>Loading more letters...</span>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<script>
// Optimized search implementation with progressive loading
(function() {
  let searchIndex = null;
  let currentlyDisplayed = 20;
  let isLoading = false;
  let allLettersLoaded = false;
  let searchActive = false;
  
  // Debounce function
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  // Load search index
  async function loadSearchIndex() {
    if (searchIndex) return searchIndex;
    
    try {
      const response = await fetch('/search-index.json');
      searchIndex = await response.json();
      console.log(`[Search] Loaded index with ${searchIndex.letters.length} letters`);
      return searchIndex;
    } catch (error) {
      console.error('[Search] Failed to load index:', error);
      return null;
    }
  }
  
  // Create letter card HTML
  function createLetterCard(letter) {
    const cleanedTitle = letter.t.replace(/\[\d+\]/g, '').trim();
    const slug = cleanedTitle.toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    const url = `/letters/${letter.n}-${slug}`;
    const date = `${65 - Math.floor((letter.n - 1) / 12)} CE`;
    
    return `
      <a href="${url}" class="letter-card" data-theme="${letter.th}" data-letter-id="${letter.n}">
        <div class="card-header">
          <div class="letter-info">
            <span class="letter-number" data-number="${letter.n}">Letter ${letter.n}</span>
            <span class="letter-theme">${letter.th}</span>
          </div>
          <span class="letter-date">${date}</span>
        </div>
        
        <h3 class="letter-title">${cleanedTitle}</h3>
        <p class="letter-preview">${letter.p}</p>
        
        <div class="card-footer">
          <span class="read-link">Read Letter ‚Üí</span>
        </div>
      </a>
    `;
  }
  
  // Load more letters
  async function loadMoreLetters() {
    if (isLoading || allLettersLoaded || searchActive) return;
    
    isLoading = true;
    const loadingIndicator = document.getElementById('loadingIndicator');
    if (loadingIndicator) loadingIndicator.style.display = 'flex';
    
    const index = await loadSearchIndex();
    if (!index) {
      isLoading = false;
      return;
    }
    
    const lettersGrid = document.getElementById('lettersGrid');
    const fragment = document.createDocumentFragment();
    
    // Load next batch of 20 letters
    const endIndex = Math.min(currentlyDisplayed + 20, index.letters.length);
    
    for (let i = currentlyDisplayed; i < endIndex; i++) {
      const div = document.createElement('div');
      div.innerHTML = createLetterCard(index.letters[i]);
      fragment.appendChild(div.firstElementChild);
    }
    
    lettersGrid.appendChild(fragment);
    currentlyDisplayed = endIndex;
    
    if (currentlyDisplayed >= index.letters.length) {
      allLettersLoaded = true;
    }
    
    if (loadingIndicator) loadingIndicator.style.display = 'none';
    isLoading = false;
  }
  
  // Search implementation
  function searchScore(letter, query) {
    const text = (letter.t + ' ' + letter.s + ' ' + letter.th).toLowerCase();
    query = query.toLowerCase().trim();
    
    if (!query) return 0;
    
    // Exact match in title
    if (letter.t.toLowerCase() === query) return 1000;
    
    // Contains exact phrase
    if (text.includes(query)) return 500;
    
    const words = query.split(/\s+/).filter(word => word.length > 0);
    let score = 0;
    let wordMatches = 0;
    
    words.forEach(word => {
      if (text.includes(word)) {
        wordMatches++;
        // Bonus for title matches
        if (letter.t.toLowerCase().includes(word)) {
          score += 50;
        } else {
          score += 20;
        }
      }
    });
    
    // Only return results if ALL words are found
    if (wordMatches !== words.length) {
      return 0;
    }
    
    return score;
  }
  
  const performSearch = debounce(async function() {
    const searchInput = document.getElementById('searchInput');
    const query = searchInput.value.trim();
    const lettersGrid = document.getElementById('lettersGrid');
    const resultDiv = document.getElementById('resultCount');
    
    if (!query) {
      // Reset to progressive loading mode
      searchActive = false;
      lettersGrid.innerHTML = '';
      currentlyDisplayed = 0;
      allLettersLoaded = false;
      
      // Load initial letters
      const index = await loadSearchIndex();
      if (index) {
        const fragment = document.createDocumentFragment();
        for (let i = 0; i < Math.min(20, index.letters.length); i++) {
          const div = document.createElement('div');
          div.innerHTML = createLetterCard(index.letters[i]);
          fragment.appendChild(div.firstElementChild);
        }
        lettersGrid.appendChild(fragment);
        currentlyDisplayed = 20;
      }
      
      if (resultDiv) resultDiv.textContent = '';
      return;
    }
    
    searchActive = true;
    const index = await loadSearchIndex();
    if (!index) return;
    
    // Score and filter letters
    const results = [];
    index.letters.forEach(letter => {
      const score = searchScore(letter, query);
      if (score > 0) {
        results.push({ letter, score });
      }
    });
    
    // Sort by score
    results.sort((a, b) => b.score - a.score);
    
    // Update grid with results
    lettersGrid.innerHTML = '';
    const fragment = document.createDocumentFragment();
    results.forEach(({ letter }) => {
      const div = document.createElement('div');
      div.innerHTML = createLetterCard(letter);
      fragment.appendChild(div.firstElementChild);
    });
    lettersGrid.appendChild(fragment);
    
    // Update result count
    if (resultDiv) {
      resultDiv.textContent = `Found ${results.length} letter${results.length !== 1 ? 's' : ''} matching "${query}"`;
    }
  }, 150);
  
  // Infinite scroll
  function handleScroll() {
    if (searchActive) return;
    
    const scrollHeight = document.documentElement.scrollHeight;
    const scrollTop = window.scrollY;
    const clientHeight = window.innerHeight;
    
    if (scrollTop + clientHeight >= scrollHeight - 500) {
      loadMoreLetters();
    }
  }
  
  // Initialize
  function init() {
    const searchInput = document.getElementById('searchInput');
    const filterTabs = document.querySelectorAll('.filter-tab');
    const sortSelect = document.getElementById('sortSelect');
    
    if (searchInput) {
      searchInput.addEventListener('input', performSearch);
      searchInput.addEventListener('keyup', function(e) {
        if (e.key === 'Escape') {
          this.value = '';
          performSearch();
        }
      });
    }
    
    // Add infinite scroll
    window.addEventListener('scroll', debounce(handleScroll, 100));
    
    // Preload search index
    loadSearchIndex();
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>

<style>
  .library-header {
    padding: 4rem 0;
    background: var(--surface);
    text-align: center;
  }

  .header-content {
    margin-bottom: 3rem;
  }

  .library-header h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 400;
    color: var(--text-primary);
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
  }

  .library-header .subtitle {
    font-size: 1.25rem;
    color: var(--text-secondary);
    font-style: italic;
    font-weight: 300;
  }

  /* Search */
  .search-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .search-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: var(--background);
    border: 2px solid var(--divider);
    border-radius: 6px;
    overflow: hidden;
    transition: border-color 0.3s ease;
  }

  .search-wrapper:focus-within {
    border-color: var(--terracotta);
  }

  .search-input {
    flex: 1;
    padding: 1.25rem 1.5rem;
    border: none;
    background: transparent;
    font-size: 1rem;
    color: var(--text-primary);
    font-family: 'Inter', sans-serif;
  }

  .search-input:focus {
    outline: none;
  }

  .search-input::placeholder {
    color: var(--text-muted);
    font-style: italic;
  }

  .search-button {
    padding: 1.25rem 1.5rem;
    background: var(--terracotta);
    border: none;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .search-button:hover {
    background: #b8561a;
  }

  .search-icon {
    font-size: 1rem;
  }

  /* Filters */
  .filters {
    padding: 2rem 0;
    background: var(--background);
    border-bottom: 1px solid var(--divider);
  }

  .filters .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
  }

  .filter-tabs {
    display: flex;
    gap: 0.5rem;
  }

  .filter-tab {
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: 1px solid var(--divider);
    color: var(--text-secondary);
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    font-weight: 400;
    cursor: pointer;
    border-radius: 20px;
    transition: all 0.3s ease;
  }

  .filter-tab:hover,
  .filter-tab.active {
    background: var(--terracotta);
    border-color: var(--terracotta);
    color: white;
  }

  .sort-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .sort-select {
    padding: 0.75rem 1rem;
    background: var(--surface);
    border: 1px solid var(--divider);
    color: var(--text-primary);
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    border-radius: 4px;
    cursor: pointer;
  }

  .sort-select:focus {
    outline: none;
    border-color: var(--terracotta);
  }

  /* Letters Section */
  .letters-section {
    padding: 4rem 0 6rem;
    background: var(--background);
  }

  .letters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .letter-card {
    background: var(--surface);
    padding: 2rem;
    border: 1px solid transparent;
    border-radius: 8px;
    text-decoration: none;
    display: block;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .letter-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--terracotta);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s ease;
  }

  .letter-card:hover {
    background: var(--terracotta-light);
    border-color: var(--subtle-border);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .letter-card:hover::before {
    transform: scaleX(1);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }

  .letter-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .letter-number {
    color: var(--terracotta);
    font-size: 0.8rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    font-family: 'Inter', sans-serif;
  }

  .letter-theme {
    color: var(--text-muted);
    font-size: 0.75rem;
    font-family: 'Inter', sans-serif;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    padding: 0.25rem 0.75rem;
    background: var(--terracotta-light);
    border-radius: 12px;
    align-self: flex-start;
  }

  .letter-date {
    color: var(--text-muted);
    font-size: 0.8rem;
    font-family: 'Inter', sans-serif;
    font-style: italic;
  }

  .letter-title {
    color: var(--text-primary);
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1rem;
    line-height: 1.4;
  }

  .letter-preview {
    color: var(--text-secondary);
    font-size: 1rem;
    line-height: 1.6;
    margin-bottom: 1.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-footer {
    display: flex;
    justify-content: flex-end;
  }

  .read-link {
    color: var(--terracotta);
    font-size: 0.9rem;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    letter-spacing: 0.025em;
    transition: all 0.3s ease;
  }

  .letter-card:hover .read-link {
    transform: translateX(0.25rem);
  }

  /* Loading indicator */
  .loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 2rem;
    color: var(--text-secondary);
  }

  .spinner {
    width: 24px;
    height: 24px;
    border: 3px solid var(--divider);
    border-top-color: var(--terracotta);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .result-count {
    padding: 0.5rem 0;
    color: var(--text-secondary);
    font-size: 0.9rem;
    font-style: italic;
    margin-bottom: 1rem;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .letters-grid {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .library-header {
      padding: 3rem 0;
    }

    .library-header h1 {
      font-size: 2.5rem;
    }

    .filters .container {
      flex-direction: column;
      align-items: stretch;
      gap: 1.5rem;
    }

    .filter-tabs {
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }

    .filter-tab {
      white-space: nowrap;
      flex-shrink: 0;
    }

    .letters-grid {
      grid-template-columns: 1fr;
    }

    .letter-card {
      padding: 1.5rem;
    }

    .search-input {
      padding: 1rem 1.25rem;
    }

    .search-button {
      padding: 1rem 1.25rem;
    }
  }
</style>