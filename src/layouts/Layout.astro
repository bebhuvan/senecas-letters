---
export interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  ogType?: string;
  canonical?: string;
}

const { 
  title, 
  description = "Seneca's Letters to Lucilius - Timeless wisdom for modern life", 
  ogImage = "/og-default.png",
  ogType = "website",
  canonical 
} = Astro.props;

const canonicalURL = canonical ? new URL(canonical, Astro.site) : Astro.url;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Performance optimizations -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;1,400;1,500&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;1,400;1,500&display=swap" rel="stylesheet"></noscript>
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//fonts.gstatic.com">
    
    <!-- Performance meta tags -->
    <meta name="theme-color" content="#c8632e">
    <meta name="color-scheme" content="light dark">
    
    <!-- Prevent flash of unstyled content (FOUC) by setting theme immediately -->
    <script>
      (function() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
      })();
    </script>
    
    <!-- SEO and Social Media -->
    <title>{title}</title>
    <meta name="description" content={description}>
    <link rel="canonical" href={canonicalURL}>
    
    <!-- Open Graph -->
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:type" content={ogType}>
    <meta property="og:url" content={canonicalURL}>
    <meta property="og:image" content={new URL(ogImage, Astro.site)}>
    <meta property="og:site_name" content="Seneca's Letters">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content={title}>
    <meta name="twitter:description" content={description}>
    <meta name="twitter:image" content={new URL(ogImage, Astro.site)}>
    
    <!-- Additional SEO -->
    <meta name="author" content="Lucius Annaeus Seneca">
    <meta name="robots" content="index, follow">
    <meta name="language" content="en-US">
  </head>
  <body>
    <slot />
    <style is:global>
      :root {
        --terracotta: #c8632e;
        --terracotta-light: rgba(200, 99, 46, 0.04);
        --terracotta-accent: rgba(200, 99, 46, 0.08);
        --text-primary: #1f1f1f;
        --text-secondary: #5a5a5a;
        --text-muted: #8a8a8a;
        --background: #fefefe;
        --surface: #ffffff;
        --divider: rgba(0, 0, 0, 0.06);
        --subtle-border: rgba(0, 0, 0, 0.08);
      }

      [data-theme="dark"] {
        --text-primary: #f2f2f2;
        --text-secondary: #d0d0d0;
        --text-muted: #9a9a9a;
        --background: #0a0a0a;
        --surface: #141414;
        --terracotta-light: rgba(200, 99, 46, 0.06);
        --terracotta-accent: rgba(200, 99, 46, 0.12);
        --divider: rgba(255, 255, 255, 0.08);
        --subtle-border: rgba(255, 255, 255, 0.12);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html {
        font-family: 'Crimson Text', Georgia, 'Times New Roman', serif;
        scroll-behavior: smooth;
        font-size: 16px;
      }

      @media (min-width: 768px) {
        html {
          font-size: 17px;
        }
      }

      @media (min-width: 1280px) {
        html {
          font-size: 18px;
        }
      }

      body {
        line-height: 1.65;
        color: var(--text-primary);
        background-color: var(--background);
        transition: background-color 0.3s ease, color 0.3s ease;
        font-feature-settings: "liga" 1, "kern" 1, "onum" 1, "calt" 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
        contain: layout style paint;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
      }

      .sans {
        font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
      }

      /* Header */
      .header {
        padding: 2rem 0;
        background: var(--background);
        border-bottom: 1px solid var(--divider);
        position: sticky;
        top: 0;
        z-index: 100;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
      }

      .nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .logo {
        font-size: 1.25rem;
        font-weight: 300;
        color: var(--terracotta);
        text-decoration: none;
        letter-spacing: -0.01em;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-family: 'Crimson Text', Georgia, serif;
      }
      
      .logo-flower {
        flex-shrink: 0;
        vertical-align: middle;
      }

      .nav-links {
        display: flex;
        list-style: none;
        gap: 2.5rem;
        align-items: center;
        font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      }

      .nav-links a {
        color: var(--text-secondary);
        text-decoration: none;
        font-size: 0.875rem;
        font-weight: 400;
        transition: color 0.3s ease;
        letter-spacing: 0.02em;
      }

      .nav-links a:hover,
      .nav-links a.active {
        color: var(--terracotta);
      }

      .theme-toggle {
        background: none;
        border: none;
        padding: 0.5rem;
        color: var(--text-secondary);
        cursor: pointer;
        font-size: 1.1rem;
        transition: color 0.3s ease;
      }

      .theme-toggle:hover {
        color: var(--terracotta);
      }


      /* Footer */
      .footer {
        padding: 4rem 0;
        background: var(--surface);
        text-align: center;
        border-top: 1px solid var(--divider);
        margin-top: 6rem;
      }

      .footer p {
        color: var(--text-muted);
        font-size: 0.95rem;
        line-height: 1.6;
        font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      }

      .footer a {
        color: var(--terracotta);
        text-decoration: none;
        transition: opacity 0.3s ease;
      }

      .footer a:hover {
        opacity: 0.8;
      }

      /* Responsive */
      @media (max-width: 768px) {
        .container {
          padding: 0 1.25rem;
        }
        
        .header {
          padding: 1rem 0;
        }
        
        .nav {
          flex-wrap: wrap;
          gap: 1rem;
          justify-content: space-between;
        }
        
        .logo {
          font-size: 1.125rem;
          gap: 0.5rem;
        }
        
        .nav-links {
          gap: 1rem;
          flex-wrap: wrap;
        }
        
        .nav-links a {
          font-size: 0.8rem;
        }
        
        .reading-controls {
          gap: 0.25rem;
        }
        
        .font-select {
          font-size: 0.7rem;
          padding: 0.2rem 0.4rem;
        }
        
        body {
          padding-top: 4rem;
        }
      }
    </style>

    <script>
      // Initialize theme toggle button text
      function initThemeToggle() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        const toggle = document.querySelector('.theme-toggle');
        if (toggle) {
          toggle.textContent = savedTheme === 'dark' ? '☀️' : '🌙';
        }
      }

      function toggleTheme() {
        const html = document.documentElement;
        const currentTheme = html.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        html.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        const toggle = document.querySelector('.theme-toggle');
        if (toggle) {
          toggle.textContent = newTheme === 'dark' ? '☀️' : '🌙';
        }
      }

      // Auto-hide header on scroll
      let lastScrollY = 0;
      let ticking = false;

      function updateHeader() {
        const header = document.querySelector('.header');
        const scrollY = window.scrollY;
        
        if (scrollY > lastScrollY && scrollY > 100) {
          // Scrolling down & past header height
          header?.classList.add('hidden');
        } else {
          // Scrolling up or at top
          header?.classList.remove('hidden');
        }
        
        lastScrollY = scrollY;
        ticking = false;
      }

      function onScroll() {
        if (!ticking) {
          requestAnimationFrame(updateHeader);
          ticking = true;
        }
      }

      // Initialize theme toggle and scroll behavior
      document.addEventListener('DOMContentLoaded', () => {
        initThemeToggle();
        window.addEventListener('scroll', onScroll, { passive: true });
      });
      
      // Add event listener for theme toggle
      document.addEventListener('click', (e) => {
        if (e.target && e.target.matches('.theme-toggle')) {
          toggleTheme();
        }
      });
    </script>
  </body>
</html>